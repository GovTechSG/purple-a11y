<!-- reportSearch.ejs script -->
<script>
  let searchInput = '';
  let currentlyClickedButton = null;

  function handleFilterMouseOver(button) {
    if (button != currentlyClickedButton) {
      button.style.background = '#f2f6ff';
      button.style.border = '1px solid #006b8c';
    }
  }

  function handleFilterMouseOut(button) {
    if (button != currentlyClickedButton) {
      button.style.background = '#FFF';
      button.style.border = '1px solid var(--A11Y-Grey-400, #c9c8c6)';
    }
  }

  function showFilter() {
    let searchFilterGroup = document.getElementById('searchFilter');
    let searchBarInput = document.getElementById('searchBarInput');

    if (searchFilterGroup) {
      if (searchFilterGroup.classList.contains('d-none')) {
        searchFilterGroup.classList.remove('d-none');
        searchFilterGroup.classList.add('search-filter-on');
        searchBarInput.classList.add('rounded-bottom-0');
      }
    }
  }

  function hideFilter() {
    let searchFilterGroup = document.getElementById('searchFilter');
    let searchBarInput = document.getElementById('searchBarInput');
    if (
      document.getElementById('searchBarInput').value === '' &&
      searchFilterGroup.classList.contains('search-filter-on')
    ) {
      searchFilterGroup.classList.remove('search-filter-on');
      searchFilterGroup.classList.add('d-none');
      searchBarInput.classList.remove('rounded-bottom-0');
    }
  }

  document.addEventListener('click', function (event) {
    let searchBarDiv = document.getElementById('searchBar');
    let searchFilterDiv = document.getElementById('searchFilter');
    if (!searchBarDiv.contains(event.target) && !searchFilterDiv.contains(event.target)) {
      hideFilter();
    }
  });

  document.getElementById('issueDescriptionsButton').addEventListener('click', function () {
    currentlyClickedButton = this;
    searchInput = document.getElementById('searchBarInput').value;
    loadRulesSummary(currentCategory, searchInput);
  });

  document.getElementById('pagesButton').addEventListener('click', function () {
    currentlyClickedButton = this;
    searchInput = document.getElementById('searchBarInput').value;
    loadRulesSummary(currentCategory, searchInput);
  });

  document.getElementById('htmlButton').addEventListener('click', function () {
    currentlyClickedButton = this;
    searchInput = document.getElementById('searchBarInput').value;
    loadRulesSummary(currentCategory, searchInput);
  });

  document.getElementById('searchBarInput').addEventListener('input', function (event) {
    searchInput = event.target.value;
    loadRulesSummary(currentCategory, searchInput);
  });

  // for filtering search

  function handleSearch(category, searchVal, filteredItems) {
    let normalizedSearchVal = searchVal.trim().toLowerCase();
    let isExactSearch =
      (normalizedSearchVal.startsWith('"') && normalizedSearchVal.endsWith('"')) ||
      (normalizedSearchVal.startsWith("'") && normalizedSearchVal.endsWith("'"));

    if (currentlyClickedButton.id === 'issueDescriptionsButton') {
      searchIssueDescription(category, filteredItems, isExactSearch, normalizedSearchVal);
    } else if (currentlyClickedButton.id === 'pagesButton') {
      searchPages(category, filteredItems, isExactSearch, normalizedSearchVal);
    } else if (currentlyClickedButton.id === 'htmlButton') {
      searchHtml(category, filteredItems, isExactSearch, normalizedSearchVal);
    }
    updateIssueOccurrence(category, filteredItems);
  }

  function searchIssueDescription(category, filteredItems, isExactSearch, normalizedSearchVal) {
    filteredItems[category].rules = filteredItems[category].rules.filter(item => {
      let normalizedDescription = item.description.toLowerCase();
      return isExactSearch
        ? normalizedDescription === normalizedSearchVal.slice(1, -1)
        : normalizedDescription.includes(normalizedSearchVal);
    });
  }

  function searchPages(category, filteredItems, isExactSearch, normalizedSearchVal) {
    // Filter pagesAffected array to only include pages with URLs that match the searchTerm
    filteredItems[category].rules = filteredItems[category].rules
      .map(item => {
        if (Array.isArray(item.pagesAffected)) {
          item.pagesAffected = item.pagesAffected.filter(page => {
            let normalizedPageUrl = page.url.toLowerCase();
            return isExactSearch
              ? normalizedPageUrl === normalizedSearchVal.slice(1, -1)
              : normalizedPageUrl.includes(normalizedSearchVal);
          });
          item.totalItems = item.pagesAffected.reduce(
            (sum, page) => sum + (Array.isArray(page.items) ? page.items.length : 0),
            0,
          );
        } else {
          item.pagesAffected = [];
          item.totalItems = 0;
        }
        return item;
      })
      .filter(item => item.pagesAffected.length > 0);
    // Update the totalItems value for the category
    filteredItems[category].totalItems = filteredItems[category].rules.reduce(
      (sum, rule) => sum + rule.totalItems,
      0,
    );
  }

  function searchHtml(category, filteredItems, isExactSearch, normalizedSearchVal) {
    normalizedSearchVal = normalizedSearchVal.replace(/\s+/g, '');
    filteredItems[category].rules.forEach(item => {
      if (Array.isArray(item.pagesAffected)) {
        item.pagesAffected.forEach(page => {
          // Update items array to only include items with xpath or html starting with searchVal
          page.items = Array.isArray(page.items)
            ? page.items.filter(item => {
                let normalizedHtml = item.html.replace(/\s+/g, '').toLowerCase();
                let normalizedXpath = item.xpath.replace(/\s+/g, '').toLowerCase();
                let filterHtml;
                if (isExactSearch) {
                  filterHtml =
                    normalizedXpath === normalizedSearchVal.slice(1, -1) ||
                    normalizedHtml === normalizedSearchVal.slice(1, -1);
                } else {
                  filterHtml =
                    normalizedXpath.includes(normalizedSearchVal) ||
                    normalizedHtml.includes(normalizedSearchVal);
                }
                return filterHtml;
              })
            : [];
        });
        // Update totalItems to be the sum of the number of elements in the items array
        item.totalItems = item.pagesAffected.reduce(
          (sum, page) => sum + (Array.isArray(page.items) ? page.items.length : 0),
          0,
        );
      }
    });
    filteredItems[category].rules = filteredItems[category].rules.filter(
      rule => rule.totalItems > 0,
    );
    // Update the totalItems value for the category
    filteredItems[category].totalItems = filteredItems[category].rules.reduce(
      (sum, rule) => sum + rule.totalItems,
      0,
    );
  }

  function updateIssueOccurrence(category, filteredItems) {
    //update no. of issues/occurances for each category
    let rules = filteredItems[category].rules;
    let totalItemsSum = rules.reduce((sum, rule) => sum + rule.totalItems, 0);
    filteredItems[category].totalItems = totalItemsSum;
    let updatedIssueOccurrence = '';

    // Determine the correct singular/plural form for 'issue' and 'occurrence'
    const issueLabel = filteredItems[category].rules.length === 1 ? 'issue' : 'issues';
    const occurrenceLabel = filteredItems[category].totalItems === 1 ? 'occurrence' : 'occurrences';

    if (category !== 'passed' && filteredItems[category].totalItems !== 0) {
      updatedIssueOccurrence = `<strong style="color: #006b8c;">${filteredItems[category].rules.length}</strong> ${issueLabel} / <strong style="color: #006b8c;">${filteredItems[category].totalItems}</strong> ${occurrenceLabel}`;
    } else if (category !== 'passed' && filteredItems[category].totalItems === 0) {
      updatedIssueOccurrence = `<strong style="color: #006b8c;">0</strong> issues`;
    } else {
      updatedIssueOccurrence = `<strong style="color: #006b8c;">${filteredItems[category].totalItems}</strong> ${occurrenceLabel}`;
    }
    if (category !== 'passed')
      document.getElementById(`${category}ItemsInformation`).innerHTML = updatedIssueOccurrence;
  }

  function resetIssueOccurrence(filteredItems) {
    for (let category in filteredItems) {
      const issueLabel = filteredItems[category].rules.length === 1 ? 'issue' : 'issues';
      const occurrenceLabel =
        filteredItems[category].totalItems === 1 ? 'occurrence' : 'occurrences';
      let updatedIssueOccurrence = '';
      if (category !== 'passed' && filteredItems[category].totalItems !== 0) {
        updatedIssueOccurrence = `${filteredItems[category].rules.length} ${issueLabel} / ${filteredItems[category].totalItems} ${occurrenceLabel}`;
      } else if (category !== 'passed' && filteredItems[category].totalItems === 0) {
        updatedIssueOccurrence = `0 issues`;
      } else {
        updatedIssueOccurrence = `${filteredItems[category].totalItems} ${occurrenceLabel}`;
      }
      if (category !== 'passed')
        document.getElementById(`${category}ItemsInformation`).innerHTML = updatedIssueOccurrence;
    }
  }

  function OffCanvasSearchWarning() {
    let expandedRuleSearchWarning = document.getElementById('expandedRuleSearchWarning');
    // Check if the element exists and has child elements
    if (expandedRuleSearchWarning && expandedRuleSearchWarning.hasChildNodes()) {
      // Remove all child elements
      while (expandedRuleSearchWarning.firstChild) {
        expandedRuleSearchWarning.removeChild(expandedRuleSearchWarning.firstChild);
      }
    }
    if (searchInput) {
      let warningDiv = document.createElement('div');
      warningDiv.id = 'search warning';
      warningDiv.className = 'alert text-sm-center search-warning';
      let warningStart = document.createTextNode(
        'The list below has been filtered according to the search term "',
      );
      let textSearchInput = document.createElement('strong');
      textSearchInput.textContent = searchInput.trim();
      let inWord = document.createTextNode('" in ');
      let filterCategory = document.createElement('strong');
      filterCategory.textContent = document
        .querySelector(`label[for="${currentlyClickedButton.id}"]`)
        .textContent.trim();
      let fullStop = document.createTextNode('.');
      // Append the text nodes and elements to the span element
      warningDiv.innerHTML = '';
      warningDiv.appendChild(warningStart);
      warningDiv.appendChild(textSearchInput);
      warningDiv.appendChild(inWord);
      warningDiv.appendChild(filterCategory);
      warningDiv.appendChild(fullStop);
      document.getElementById('expandedRuleSearchWarning').appendChild(warningDiv);
    }
  }
</script>
