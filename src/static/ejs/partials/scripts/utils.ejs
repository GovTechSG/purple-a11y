<%# utility functions %>
<script>
  function createElementFromString(htmlString) {
    const tempContainer = document.createElement('div');
    tempContainer.innerHTML = htmlString.trim();
    return tempContainer.firstChild;
  }

  const oobeeAiHtmlETL = <%- oobeeAi.htmlETL %>;
  const oobeeAiRules = <%- JSON.stringify(oobeeAi.rules) %>;

  // extract tagname and attribute name from html tag
  // e.g. ["input", "type", "value", "role"] from <input type="text" value="..." role="..." />
  const getHtmlTagAndAttributes = (htmlString) => {
    const regex = /<(\w+)(\s+(\w+)(\s*=\s*"[^"]*")?)*\s*\/?>/;
    const match = htmlString.match(regex); // check if structure of html tag is valid

    if (match) {
      const tagName = match[1];
      const attributes = match[0]
        .match(/\w+\s*=\s*"[^"]*"/g) // extract attributes e.g. ['type="text"', 'value="..."']
        .map((attr) => attr.match(/(\w+)\s*=/)[1]); // get the name e.g. "type" from each
      return [tagName, ...attributes];
    }
    return [];
  };

  const rulesUsingRoles = [
    'aria-allowed-attr',
    'aria-required-attr',
    'aria-required-children',
    'aria-required-parent',
    'aria-roles',
    'aria-allowed-role',
  ];

  const escapeHtmlForAI = html => {
    return html
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  };

  // getLocalStorageUUID returns the local storage's uuid if exists if not generates one
  // and returns the newly generated uuid
  const getLocalStorageUUID = () => {
    const storagePath = '<%= storagePath %>';
    let uuid = localStorage.getItem(`${storagePath}-uuid`);
    if (uuid) {
      return uuid;
    }

    const generateUUID = () => {
      return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
        (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16),
      );
    };
    uuid = generateUUID();
    localStorage.setItem(`${storagePath}-uuid`, uuid);

    return uuid;
  }

  const formatFeedbackFormUrl = (uuid, websiteUrl, ruleId, basicHtml, usefulCount, notUsefulCount) => {
    // AI Response Feedback Data Fields
    const
      formUrl = `https://docs.google.com/forms/d/e/1FAIpQLSdWbOHX9ggWlL7JUAz8s-Jmv-fjvM-R7dcFwqm1gTZ-sNcxHg/formResponse`,
      uuidField = 'entry.1599149312',
      websiteUrlField = 'entry.1146860880',
      ruleIdField = 'entry.942691547',
      basicHtmlField = 'entry.2085981400',
      usefulCountField = 'entry.809957654',
      notUsefulCountField = 'entry.89318735';

    return `${formUrl}?${uuidField}=${uuid}&${websiteUrlField}=${websiteUrl}&${ruleIdField}=${ruleId}&${basicHtmlField}=${basicHtml}&${usefulCountField}=${usefulCount}&${notUsefulCountField}=${notUsefulCount}`;
  }

  const logAiResponseFeedback = (feedbackType, ruleId, buttonsDiv, basicHtml) => {
    const isUseful = feedbackType === 'useful';
    const websiteUrl = '<%= urlScanned %>';
    const storagePath = '<%= storagePath %>';
    const finalUrl = formatFeedbackFormUrl(getLocalStorageUUID(), websiteUrl, ruleId, escapeHtmlForAI(basicHtml), isUseful ? 1 : 0, isUseful ? 0 : 1);
    try {
      fetch(finalUrl, {
        mode: 'no-cors'
      });

      // Store useful value in storage
      let aiUsefulFeedbackLog = localStorage.getItem(storagePath);
      if (aiUsefulFeedbackLog === null) {
        aiUsefulFeedbackLog = {};
      } else {
        aiUsefulFeedbackLog = JSON.parse(aiUsefulFeedbackLog);
      }
      aiUsefulFeedbackLog[buttonsDiv] = isUseful ? 'useful' : 'notUseful';
      localStorage.setItem(storagePath, JSON.stringify(aiUsefulFeedbackLog));
    } catch (err) {
      console.log('Error sending feedback to backend: ', err);
    }

    document
      .getElementById(buttonsDiv)
      .replaceChildren(
        createElementFromString(
          `<p class="aiFeedbackResponse">You rated this AI suggestion ${isUseful ? 'useful': 'not useful'}. <a class="undoAiFeedback" href="#" onclick="undoAiFeedback(\'${buttonsDiv}\', \'${ruleId}\', \'${escapeHtmlForAI(
              basicHtml,
            )}\')">Undo</a></p>`,
        ),
      );
  };

  const undoAiFeedback = (buttonDiv, ruleId, basicHtml) => {
    const storagePath = '<%= storagePath %>';
    const websiteUrl = '<%= urlScanned %>';
    var aiUsefulFeedbackLog = JSON.parse(localStorage.getItem(storagePath)) || {};
    const feedbackType = aiUsefulFeedbackLog[buttonDiv];
    const isUseful = feedbackType === 'useful';
    const finalUrl = formatFeedbackFormUrl(getLocalStorageUUID(), websiteUrl, ruleId, escapeHtmlForAI(basicHtml), isUseful ? -1 : 0, isUseful ? 0 : -1);
    try {
      fetch(finalUrl, {
        mode: 'no-cors'
      });

      // Remove useful value in storage
      delete aiUsefulFeedbackLog[buttonDiv];
      localStorage.setItem(storagePath, JSON.stringify(aiUsefulFeedbackLog));
    } catch (err) {
      console.log('Error undoing AI feedback: ', err);
    }

    document.getElementById(buttonDiv)
      .innerHTML = `<button class="aiFeedbackButton" onClick="logAiResponseFeedback('useful', '${ruleId}', '${buttonDiv}', '${basicHtml}')">
          <svg
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M8.48027 2.03518C7.7505 1.85274 7.07264 2.40464 7.02379 3.11914C6.96883 3.92143 6.84821 4.65807 6.69707 5.09623C6.60165 5.37104 6.33142 5.86951 5.90318 6.34737C5.47799 6.82294 4.92456 7.2466 4.27647 7.4237C3.7635 7.56339 3.2406 8.00767 3.2406 8.65652V11.7107C3.2406 12.3557 3.76121 12.8283 4.34594 12.8901C5.16273 12.9771 5.53982 13.2069 5.92456 13.442L5.9612 13.4649C6.16883 13.5908 6.40242 13.7305 6.70165 13.8344C7.0047 13.9382 7.3589 14 7.82073 14H10.4925C11.2077 14 11.7131 13.6359 11.9688 13.1878C12.0924 12.9763 12.1592 12.7365 12.1627 12.4916C12.1627 12.3756 12.1451 12.2534 12.1039 12.1374C12.2573 11.9367 12.394 11.6962 12.4764 11.4496C12.5604 11.1977 12.6077 10.868 12.4795 10.5725C12.5322 10.4733 12.5711 10.3672 12.6009 10.2649C12.6596 10.0588 12.6871 9.83132 12.6871 9.61071C12.6871 9.39086 12.6596 9.16415 12.6009 8.95728C12.5742 8.86218 12.5389 8.76969 12.4955 8.68094C12.6292 8.49077 12.7152 8.27126 12.7463 8.0409C12.7773 7.81054 12.7526 7.57609 12.6741 7.35729C12.5169 6.90538 12.1535 6.5176 11.7581 6.3863C11.1116 6.17103 10.3818 6.17561 9.83751 6.22523C9.72452 6.2354 9.61177 6.24813 9.49935 6.2634C9.76416 5.12935 9.74791 3.94777 9.45202 2.82143C9.40054 2.64097 9.30179 2.47753 9.16597 2.34802C9.03016 2.21852 8.86221 2.12764 8.6795 2.0848L8.48027 2.03518ZM10.4925 13.2374H7.82073C7.43142 13.2374 7.16195 13.1847 6.9505 13.1122C6.736 13.0382 6.56425 12.9382 6.35814 12.8122L6.32761 12.7939C5.90395 12.5351 5.41311 12.2359 4.42685 12.1313C4.17266 12.1038 4.00396 11.9099 4.00396 11.7115V8.65652C4.00396 8.46263 4.17647 8.24202 4.47724 8.16034C5.31311 7.93133 5.98639 7.40004 6.47264 6.85653C6.95737 6.31455 7.28485 5.73058 7.41768 5.34661C7.60317 4.81226 7.72836 3.997 7.78561 3.17105C7.8047 2.89472 8.06042 2.71762 8.29477 2.77563L8.49477 2.82601C8.61691 2.85655 8.69172 2.93517 8.71462 3.02067C9.02636 4.20847 8.98792 5.46108 8.60393 6.62752C8.5822 6.6924 8.5783 6.76192 8.59265 6.82882C8.607 6.89572 8.63907 6.95753 8.6855 7.00778C8.73193 7.05803 8.79101 7.09488 8.85657 7.11447C8.92212 7.13406 8.99174 7.13566 9.05813 7.11912L9.06042 7.11836L9.0711 7.11607L9.11538 7.10538C9.37641 7.04995 9.64048 7.00993 9.90621 6.98553C10.4123 6.93973 11.0184 6.94431 11.5169 7.11072C11.6505 7.155 11.8604 7.33973 11.952 7.6069C12.0337 7.84202 12.0184 8.11835 11.749 8.38705L11.4795 8.65652L11.749 8.92675C11.7818 8.95957 11.8291 9.03438 11.8665 9.1672C11.9032 9.29468 11.9238 9.44964 11.9238 9.61071C11.9238 9.77254 11.9032 9.92674 11.8665 10.055C11.8283 10.1878 11.7818 10.2626 11.749 10.2954L11.4795 10.5649L11.749 10.8351C11.7848 10.871 11.8322 10.9702 11.7528 11.2076C11.67 11.4379 11.5385 11.6475 11.3673 11.8221L11.0978 12.0916L11.3673 12.3618C11.3719 12.3657 11.3986 12.4 11.3986 12.4916C11.3952 12.6036 11.3634 12.7129 11.3062 12.8092C11.1803 13.029 10.9222 13.2366 10.4925 13.2366V13.2374Z"
              fill="#9021a6"
            />
          </svg>
          Useful</button
        >    <button class="aiFeedbackButton" style="margin-left:16px" onClick="logAiResponseFeedback('notUseful', '${ruleId}', '${buttonDiv}', '${basicHtml}')">
          <svg
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M8.48066 13.9646C7.7509 14.1478 7.07382 13.5951 7.0242 12.8807C6.96924 12.0791 6.84864 11.3425 6.69749 10.9036C6.60208 10.6288 6.33185 10.1311 5.90362 9.65325C5.47844 9.17693 4.92502 8.75327 4.27694 8.57694C3.76398 8.43648 3.24109 7.99222 3.24109 7.34338V4.29002C3.24109 3.645 3.76169 3.17249 4.34641 3.1099C5.16318 3.02364 5.54027 2.79311 5.92499 2.558L5.96163 2.53586C6.16926 2.40915 6.40284 2.26946 6.70207 2.16641C7.00512 2.06107 7.35931 2 7.82113 2H10.4928C11.2081 2 11.7134 2.36488 11.9691 2.81219C12.0943 3.03127 12.163 3.27554 12.163 3.50912C12.163 3.62515 12.1455 3.74729 12.1042 3.86331C12.2577 4.06331 12.3943 4.30376 12.4767 4.55032C12.5607 4.80222 12.608 5.13199 12.4798 5.42816C12.5325 5.5274 12.5714 5.63274 12.6012 5.73579C12.6599 5.94189 12.6874 6.1686 12.6874 6.38921C12.6874 6.60981 12.6599 6.83652 12.6012 7.04263C12.5745 7.13423 12.5401 7.22888 12.4958 7.31972C12.7966 7.75559 12.8149 8.23573 12.6744 8.64259C12.5172 9.09448 12.1539 9.48226 11.7584 9.61356C11.1119 9.82958 10.3821 9.82424 9.83788 9.77462C9.72488 9.76444 9.61214 9.75172 9.49972 9.73645C9.76468 10.8707 9.74843 12.0526 9.45239 13.1791C9.34705 13.5669 9.03255 13.8264 8.67989 13.915L8.48066 13.9646ZM10.4928 2.76334H7.82113C7.43183 2.76334 7.16237 2.81525 6.95092 2.88776C6.73642 2.96181 6.56467 3.06257 6.35857 3.18776L6.32804 3.20684C5.90438 3.46485 5.41356 3.76408 4.42732 3.86942C4.17313 3.89614 4.00443 4.09079 4.00443 4.28926V7.34338C4.00443 7.53803 4.17694 7.75788 4.4777 7.83955C5.31356 8.06856 5.98682 8.6006 6.47307 9.1441C6.95779 9.68607 7.28527 10.27 7.41809 10.6532C7.60358 11.1876 7.72877 12.0028 7.78602 12.8287C7.8051 13.1051 8.06082 13.2829 8.29517 13.2242L8.49516 13.1745C8.6173 13.144 8.6921 13.0646 8.715 12.9799C9.02689 11.7919 8.98845 10.539 8.60432 9.37234C8.58276 9.30751 8.57901 9.23808 8.59344 9.17131C8.60787 9.10453 8.63996 9.04285 8.68636 8.9927C8.73276 8.94256 8.79177 8.90579 8.85723 8.88623C8.92269 8.86667 8.9922 8.86504 9.05851 8.88151H9.0608L9.07148 8.88457L9.11576 8.89449C9.37678 8.94991 9.64085 8.98993 9.90658 9.01433C10.4127 9.06013 11.0188 9.05555 11.5172 8.88991C11.6508 8.84487 11.8607 8.66014 11.9523 8.39297C12.034 8.15787 12.0187 7.88154 11.7493 7.6136L11.4798 7.34338L11.7493 7.07316C11.7821 7.0411 11.8294 6.96629 11.8668 6.83271C11.9035 6.70523 11.9241 6.55027 11.9241 6.38921C11.9241 6.22814 11.9035 6.07318 11.8668 5.94571C11.8287 5.81288 11.7821 5.73731 11.7493 5.70525L11.4798 5.43503L11.7493 5.16481C11.7852 5.12893 11.8325 5.03046 11.7531 4.7923C11.6703 4.56236 11.5388 4.35302 11.3676 4.17857L11.0982 3.90835L11.3676 3.63813C11.3722 3.63431 11.3989 3.59996 11.3989 3.50836C11.3954 3.39665 11.3636 3.28766 11.3065 3.19157C11.1798 2.97097 10.9226 2.76334 10.4928 2.76334Z"
              fill="#9021a6"
            />
          </svg>
          Not useful
        </button>`;
  };

  const memoizeApiCall = () => {
    // cache
    let ongoingPromise = {};
    let catalogCache = {};
    let requestedDateTime = {};

    return async (apiUrl) => {
      const key = JSON.stringify(apiUrl);
      const currDateTime = new Date();
      const diffInMinutes = (currDateTime - (requestedDateTime[key] || 0)) / (1000 * 60);

      // do not refresh api call if previous call made <= 10mins ago
      if (requestedDateTime[key] && diffInMinutes <= 10) {
        // check if the api request has already been made
        if (ongoingPromise[key]) {
          return ongoingPromise[key];
        }

        // check if the data is already in the cache
        if (catalogCache[key]) {
          return Promise.resolve(catalogCache[key]);
        }
      }

      requestedDateTime[key] = currDateTime;
      // if not in the cache, make the API call and store the result
      const apiPromise = fetch(apiUrl)
        .then((response) => {
          if (!response.ok) {
            throw new Error('response status not ok');
          }

          return response.json()
        })
        .then((data) => {
          catalogCache[key] = data; // store the result in the cache
          delete ongoingPromise[key]; // remove the ongoing promise

          return data;
        })
        .catch((error) => {
          delete ongoingPromise[key]; // remove the promise from the queue in case of an error
          throw new Error('Network Error');
        });

      // add the promise to the queue
      ongoingPromise[key] = apiPromise;

      return apiPromise;
    }
  };

  const api = memoizeApiCall();

  const apiUrls = {
    catalog: 'https://govtechsg.github.io/purple-ai/catalog.json',
    getRuleIdData: (ruleId) => `https://govtechsg.github.io/purple-ai/results/${ruleId}.json`
  }

  const isOffline = () => !window.navigator.onLine;

  const checkPurpleAiQueryLabel = async (ruleId, ruleHtml) => {
    const oobeeAiQueryLabel = {
      label: null,
      hasNetworkError: false,
      hasGenericError: false
    }

    return api(apiUrls.catalog).then(catalogData => {
        // no information for current rule
        if (!catalogData[ruleId] || catalogData[ruleId].length === 0) {
          return oobeeAiQueryLabel;
        }

        if (rulesUsingRoles.includes(ruleId)) {
          const ariaValidAttrValueHtml = ruleHtml.replace(/<|>/g, '');
          const ariaValidAttrValueHtmlList = ariaValidAttrValueHtml.split(' ');
          const htmlElement = ariaValidAttrValueHtmlList[0];
          const roleForHtml = ariaValidAttrValueHtmlList.find(item => /^role="\w+"/.test(item));
          if (roleForHtml) {
            const currentLabel = `${htmlElement}_${roleForHtml}`.trim();
            const foundLabel = catalogData[ruleId].find(label => label === currentLabel);
            oobeeAiQueryLabel.label = foundLabel ? escapeHtmlForAI(currentLabel) : null;
            return oobeeAiQueryLabel;
          }
        }

        // e.g. li_aria-controls_aria-selected_role
        const currentLabelList = getHtmlTagAndAttributes(oobeeAiHtmlETL(ruleHtml));
        const currentLabel = currentLabelList.join('_');

        if (catalogData[ruleId].includes(currentLabel)) {
          oobeeAiQueryLabel.label = escapeHtmlForAI(currentLabel);
          return oobeeAiQueryLabel;
        }

        // count the number of elements in keyArr that
        // have matching elements at the same index in currentLabelList
        // return match if >= 3 elements matching
        const currentLabelSet = new Set(currentLabelList);
        const foundLabel = catalogData[ruleId].find(label => {
          const keyArr = label.split('_');
          const attrMatch = keyArr.filter(key => currentLabelSet.has(key));

          return attrMatch.length >= 3;
        })

        oobeeAiQueryLabel.label = foundLabel ? escapeHtmlForAI(foundLabel) : null;
        return oobeeAiQueryLabel;
      })
      .catch(err => {
        console.error(`An error has occurred while checking if ${ruleId} needs AI query`);
        if (err.message === 'Network Error') {
          return {
            label: null,
            hasNetworkError: true,
            hasGenericError: false
          }
        } else {
          return {
            label: null,
            hasNetworkError: false,
            hasGenericError: true
          }
        }
      });
  }

  const handleOfflinePurpleAi = async (ruleId, accordionDiv, html, buttonsDiv, aiErrorDiv) => {
    let oobeeAiQueryLabel = await checkPurpleAiQueryLabel(ruleId, html);
    if (oobeeAiQueryLabel.hasNetworkError) {
      document
        .getElementById(aiErrorDiv)
        .replaceChildren(
          createElementFromString(
            `<div class="generateAiError">This feature requires internet connection. Please try again</div>`,
          ),
        );
    } else if (oobeeAiQueryLabel.hasNetworkError) {
      document
        .getElementById(aiErrorDiv)
        .replaceChildren(
          createElementFromString(
            `<div class="generateAiError">Something went wrong. Please try again</div>`,
          ),
        );
    } else if (!oobeeAiQueryLabel.label) {
      document.getElementById(accordionDiv).innerHTML = `<span class="processAI">Processing AI suggestions, please check back later.</span>`
    } else {
      await getPurpleAiAnswer(ruleId, accordionDiv, oobeeAiQueryLabel.label, buttonsDiv, aiErrorDiv);
    }
  }

  const getPurpleAiAnswer = async (ruleId, accordionDiv, ruleHtmlLabel, buttonsDiv, aiErrorDiv, html) => {
    const storagePath = '<%= storagePath %>';
    document.getElementById(buttonsDiv).disabled = true;
    document.getElementById(buttonsDiv).textContent = 'Generating...';

    api(apiUrls.getRuleIdData(ruleId))
      .then(ruleIdData => {
        const escapedHtml = escapeHtmlForAI(ruleIdData[ruleHtmlLabel]);
        const replacedString = escapedHtml.replaceAll(
          /```(?:html)?([\s\S]*?)```/g,
          `<code class="codeForAiResponse language-html hljs">$1</code>`,
        );
        const replacedRuleHtmlLabel = escapeHtmlForAI(ruleHtmlLabel);
        document.getElementById(accordionDiv).innerHTML = `
        <div class="ai-response-card">
          <p class="mb-0">
            ${replacedString.replace(/\n/g, '<br />')}
          </p>
        </div>`

        if (!isOffline()) {
          const aiVoteFeedback = JSON.parse(localStorage.getItem(storagePath));
          if (aiVoteFeedback && aiVoteFeedback[buttonsDiv]) {
            var voteString = aiVoteFeedback[buttonsDiv] === 'useful' ?
              `You rated this AI suggestion useful. ` :
              `You rated this AI suggestion not useful. `;
            const votedElem = createElementFromString(`
              <div id=${buttonsDiv} style="display: flex;justify-content: flex-end;margin-top: 16px;">
                <p class="aiFeedbackResponse">${voteString}<a class="undoAiFeedback" href="#" onclick="undoAiFeedback(\'${buttonsDiv}\', \'${ruleId}\', \'${escapeHtmlForAI(
                        ruleHtmlLabel,
                      )}\')">Undo</a>
                </p>
              </div>
            `)
            document.getElementById(accordionDiv).getElementsByClassName('ai-response-card')[0].appendChild(votedElem);
          } else {
            const feedbackButtonsElem = createElementFromString(  `
              <div id=${buttonsDiv} class="feedbackButtons">
                <button class="aiFeedbackButton" onClick="logAiResponseFeedback('useful', '${ruleId}', '${buttonsDiv}', '${replacedRuleHtmlLabel}')">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M8.48027 2.03518C7.7505 1.85274 7.07264 2.40464 7.02379 3.11914C6.96883 3.92143 6.84821 4.65807 6.69707 5.09623C6.60165 5.37104 6.33142 5.86951 5.90318 6.34737C5.47799 6.82294 4.92456 7.2466 4.27647 7.4237C3.7635 7.56339 3.2406 8.00767 3.2406 8.65652V11.7107C3.2406 12.3557 3.76121 12.8283 4.34594 12.8901C5.16273 12.9771 5.53982 13.2069 5.92456 13.442L5.9612 13.4649C6.16883 13.5908 6.40242 13.7305 6.70165 13.8344C7.0047 13.9382 7.3589 14 7.82073 14H10.4925C11.2077 14 11.7131 13.6359 11.9688 13.1878C12.0924 12.9763 12.1592 12.7365 12.1627 12.4916C12.1627 12.3756 12.1451 12.2534 12.1039 12.1374C12.2573 11.9367 12.394 11.6962 12.4764 11.4496C12.5604 11.1977 12.6077 10.868 12.4795 10.5725C12.5322 10.4733 12.5711 10.3672 12.6009 10.2649C12.6596 10.0588 12.6871 9.83132 12.6871 9.61071C12.6871 9.39086 12.6596 9.16415 12.6009 8.95728C12.5742 8.86218 12.5389 8.76969 12.4955 8.68094C12.6292 8.49077 12.7152 8.27126 12.7463 8.0409C12.7773 7.81054 12.7526 7.57609 12.6741 7.35729C12.5169 6.90538 12.1535 6.5176 11.7581 6.3863C11.1116 6.17103 10.3818 6.17561 9.83751 6.22523C9.72452 6.2354 9.61177 6.24813 9.49935 6.2634C9.76416 5.12935 9.74791 3.94777 9.45202 2.82143C9.40054 2.64097 9.30179 2.47753 9.16597 2.34802C9.03016 2.21852 8.86221 2.12764 8.6795 2.0848L8.48027 2.03518ZM10.4925 13.2374H7.82073C7.43142 13.2374 7.16195 13.1847 6.9505 13.1122C6.736 13.0382 6.56425 12.9382 6.35814 12.8122L6.32761 12.7939C5.90395 12.5351 5.41311 12.2359 4.42685 12.1313C4.17266 12.1038 4.00396 11.9099 4.00396 11.7115V8.65652C4.00396 8.46263 4.17647 8.24202 4.47724 8.16034C5.31311 7.93133 5.98639 7.40004 6.47264 6.85653C6.95737 6.31455 7.28485 5.73058 7.41768 5.34661C7.60317 4.81226 7.72836 3.997 7.78561 3.17105C7.8047 2.89472 8.06042 2.71762 8.29477 2.77563L8.49477 2.82601C8.61691 2.85655 8.69172 2.93517 8.71462 3.02067C9.02636 4.20847 8.98792 5.46108 8.60393 6.62752C8.5822 6.6924 8.5783 6.76192 8.59265 6.82882C8.607 6.89572 8.63907 6.95753 8.6855 7.00778C8.73193 7.05803 8.79101 7.09488 8.85657 7.11447C8.92212 7.13406 8.99174 7.13566 9.05813 7.11912L9.06042 7.11836L9.0711 7.11607L9.11538 7.10538C9.37641 7.04995 9.64048 7.00993 9.90621 6.98553C10.4123 6.93973 11.0184 6.94431 11.5169 7.11072C11.6505 7.155 11.8604 7.33973 11.952 7.6069C12.0337 7.84202 12.0184 8.11835 11.749 8.38705L11.4795 8.65652L11.749 8.92675C11.7818 8.95957 11.8291 9.03438 11.8665 9.1672C11.9032 9.29468 11.9238 9.44964 11.9238 9.61071C11.9238 9.77254 11.9032 9.92674 11.8665 10.055C11.8283 10.1878 11.7818 10.2626 11.749 10.2954L11.4795 10.5649L11.749 10.8351C11.7848 10.871 11.8322 10.9702 11.7528 11.2076C11.67 11.4379 11.5385 11.6475 11.3673 11.8221L11.0978 12.0916L11.3673 12.3618C11.3719 12.3657 11.3986 12.4 11.3986 12.4916C11.3952 12.6036 11.3634 12.7129 11.3062 12.8092C11.1803 13.029 10.9222 13.2366 10.4925 13.2366V13.2374Z"
                      fill="#9021a6"
                    />
                  </svg>
                  Useful
                </button>
                <button class="aiFeedbackButton" style="margin-left:16px" onClick="logAiResponseFeedback('notUseful', '${ruleId}', '${buttonsDiv}', '${replacedRuleHtmlLabel}')">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M8.48066 13.9646C7.7509 14.1478 7.07382 13.5951 7.0242 12.8807C6.96924 12.0791 6.84864 11.3425 6.69749 10.9036C6.60208 10.6288 6.33185 10.1311 5.90362 9.65325C5.47844 9.17693 4.92502 8.75327 4.27694 8.57694C3.76398 8.43648 3.24109 7.99222 3.24109 7.34338V4.29002C3.24109 3.645 3.76169 3.17249 4.34641 3.1099C5.16318 3.02364 5.54027 2.79311 5.92499 2.558L5.96163 2.53586C6.16926 2.40915 6.40284 2.26946 6.70207 2.16641C7.00512 2.06107 7.35931 2 7.82113 2H10.4928C11.2081 2 11.7134 2.36488 11.9691 2.81219C12.0943 3.03127 12.163 3.27554 12.163 3.50912C12.163 3.62515 12.1455 3.74729 12.1042 3.86331C12.2577 4.06331 12.3943 4.30376 12.4767 4.55032C12.5607 4.80222 12.608 5.13199 12.4798 5.42816C12.5325 5.5274 12.5714 5.63274 12.6012 5.73579C12.6599 5.94189 12.6874 6.1686 12.6874 6.38921C12.6874 6.60981 12.6599 6.83652 12.6012 7.04263C12.5745 7.13423 12.5401 7.22888 12.4958 7.31972C12.7966 7.75559 12.8149 8.23573 12.6744 8.64259C12.5172 9.09448 12.1539 9.48226 11.7584 9.61356C11.1119 9.82958 10.3821 9.82424 9.83788 9.77462C9.72488 9.76444 9.61214 9.75172 9.49972 9.73645C9.76468 10.8707 9.74843 12.0526 9.45239 13.1791C9.34705 13.5669 9.03255 13.8264 8.67989 13.915L8.48066 13.9646ZM10.4928 2.76334H7.82113C7.43183 2.76334 7.16237 2.81525 6.95092 2.88776C6.73642 2.96181 6.56467 3.06257 6.35857 3.18776L6.32804 3.20684C5.90438 3.46485 5.41356 3.76408 4.42732 3.86942C4.17313 3.89614 4.00443 4.09079 4.00443 4.28926V7.34338C4.00443 7.53803 4.17694 7.75788 4.4777 7.83955C5.31356 8.06856 5.98682 8.6006 6.47307 9.1441C6.95779 9.68607 7.28527 10.27 7.41809 10.6532C7.60358 11.1876 7.72877 12.0028 7.78602 12.8287C7.8051 13.1051 8.06082 13.2829 8.29517 13.2242L8.49516 13.1745C8.6173 13.144 8.6921 13.0646 8.715 12.9799C9.02689 11.7919 8.98845 10.539 8.60432 9.37234C8.58276 9.30751 8.57901 9.23808 8.59344 9.17131C8.60787 9.10453 8.63996 9.04285 8.68636 8.9927C8.73276 8.94256 8.79177 8.90579 8.85723 8.88623C8.92269 8.86667 8.9922 8.86504 9.05851 8.88151H9.0608L9.07148 8.88457L9.11576 8.89449C9.37678 8.94991 9.64085 8.98993 9.90658 9.01433C10.4127 9.06013 11.0188 9.05555 11.5172 8.88991C11.6508 8.84487 11.8607 8.66014 11.9523 8.39297C12.034 8.15787 12.0187 7.88154 11.7493 7.6136L11.4798 7.34338L11.7493 7.07316C11.7821 7.0411 11.8294 6.96629 11.8668 6.83271C11.9035 6.70523 11.9241 6.55027 11.9241 6.38921C11.9241 6.22814 11.9035 6.07318 11.8668 5.94571C11.8287 5.81288 11.7821 5.73731 11.7493 5.70525L11.4798 5.43503L11.7493 5.16481C11.7852 5.12893 11.8325 5.03046 11.7531 4.7923C11.6703 4.56236 11.5388 4.35302 11.3676 4.17857L11.0982 3.90835L11.3676 3.63813C11.3722 3.63431 11.3989 3.59996 11.3989 3.50836C11.3954 3.39665 11.3636 3.28766 11.3065 3.19157C11.1798 2.97097 10.9226 2.76334 10.4928 2.76334Z"
                      fill="#9021a6"
                    />
                  </svg>
                  Not useful
                </button>
              </div>
            `);
            document.getElementById(accordionDiv).getElementsByClassName('ai-response-card')[0].appendChild(feedbackButtonsElem);
          }
        }

        document.querySelectorAll('.codeForAiResponse').forEach(el => {
          hljs.highlightElement(el);
        });
      }).catch((err) => {
        console.log('Error fetching AI response', err);
        document.getElementById(buttonsDiv).disabled = false;
        document.getElementById(buttonsDiv).style = `border: 1px solid #6E52EF;color: #6E52EF;`;
        document.getElementById(buttonsDiv).textContent = 'Generate response';
        const errorMessageToDisplay = err.message === 'Network Error'
          ? 'This feature requires internet connection. Please try again'
          : 'Something went wrong. Please try again.'
        document
          .getElementById(aiErrorDiv)
          .replaceChildren(
            createElementFromString(
              `<div class="generateAiError">${errorMessageToDisplay}</div>`,
            ),
          );
      });
  }

  function getFormattedCategoryTitle(category) {
    const titles = {
      mustFix: 'Must Fix',
      goodToFix: 'Good to Fix',
      needsReview: 'Needs Review',
      passed: 'Passed',
    };

    return titles[category];
  }

  function escapeHtmlStringForArg(string) {
    return htmlEscapeString(string)
      .replaceAll('&#039;', "\\'")
      .replace(/&gt;\s+(.*?)\s+&lt;\//g, '&gt;$1&lt;/');
  }

  function htmlEscapeString(string) {
    if (string.includes('&lt;/script>')) {
      string = string.replaceAll('&lt;/script>', '<\/script>')
    }
    return string
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  }
</script>
